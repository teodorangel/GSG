name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Add project to PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip and setuptools
        run: |
          python -m pip install --upgrade pip setuptools

      - name: Install project in editable mode with dev extras
        run: pip install -e ".[dev]"

      - name: Install langchain-community and FastAPI for compatibility
        run: |
          pip install langchain-community
          pip install fastapi
          pip install requests

      - name: Create Database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
        run: |
          echo "Ensuring database 'gsg' exists..."
          psql $DATABASE_URL -c 'CREATE DATABASE gsg;' || echo "Database 'gsg' already exists."

      - name: Reset Database Schema
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gsg
        run: |
          echo "Resetting database schema..."
          psql $DATABASE_URL -c 'DROP SCHEMA public CASCADE; CREATE SCHEMA public;'
          echo "Database schema reset successfully."

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/gsg' }}
        run: |
          echo "Applying migrations with Alembic..."
          if ! alembic upgrade head; then
            echo "Migration failed. Checking database state..."
            psql $DATABASE_URL -c '\dt'
            exit 1
          fi

      - name: Debug installed packages
        run: |
          pip list

      - name: Ensure pytest is available
        run: pip install pytest pytest-cov pytest-asyncio
      - name: Run tests + coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gsg
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        run: python -m pytest --cov --cov-report=xml

