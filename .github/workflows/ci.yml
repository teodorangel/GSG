name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install deps
        run: poetry install --no-interaction --with dev

      - name: Create Database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
        run: |
          echo "Ensuring database 'gsg' exists..."
          poetry run psql $DATABASE_URL -c 'CREATE DATABASE gsg;' || echo "Database 'gsg' already exists."

      - name: Reset Database Schema
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gsg
        run: |
          echo "Resetting database schema..."
          poetry run psql $DATABASE_URL -c 'DROP SCHEMA public CASCADE; CREATE SCHEMA public;'
          echo "Database schema reset successfully."

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/gsg' }}
        run: |
          echo "Applying migrations with Alembic..."
          if ! poetry run alembic upgrade head; then
            echo "Migration failed. Checking database state..."
            poetry run psql $DATABASE_URL -c '\dt'
            exit 1
          fi

      - name: Debug installed packages
        run: |
          poetry show
          poetry run pip list

      - name: Run tests + coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gsg
          OPENAI_API_KEY: dummy
          PINECONE_API_KEY: dummy        # (future proof)
        run: poetry run pytest --cov --cov-report=xml

